// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let recentCities = JSON.parse(localStorage.getItem('recentCities')) || [];
let searchTimeout;

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const popularCities = [
    '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
});

function initializeApp() {
    displayRecentCities();
    displayPopularCities();
}

function setupEventListeners() {
    const cityInput = document.getElementById('cityInput');
    const searchButton = document.getElementById('searchButton');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    cityInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length >= 2) {
            searchTimeout = setTimeout(() => {
                fetchCitySuggestions(query);
            }, 300);
        } else {
            hideSuggestions();
        }
    });
    
    // –ü–æ–∏—Å–∫ –ø–æ Enter
    cityInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            searchWeather();
        }
    });
    
    // –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.input-container')) {
            hideSuggestions();
        }
    });
}

async function fetchCitySuggestions(query) {
    try {
        const response = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(query)}&count=5&language=ru&format=json`);
        const data = await response.json();
        
        if (data.results && data.results.length > 0) {
            displaySuggestions(data.results);
        } else {
            hideSuggestions();
        }
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
        hideSuggestions();
    }
}

function displaySuggestions(suggestions) {
    const suggestionsDiv = document.getElementById('suggestions');
    suggestionsDiv.innerHTML = '';
    
    suggestions.forEach(city => {
        const item = document.createElement('div');
        item.className = 'suggestion-item';
        item.textContent = `${city.name}${city.admin1 ? ', ' + city.admin1 : ''}${city.country ? ', ' + city.country : ''}`;
        item.addEventListener('click', () => {
            document.getElementById('cityInput').value = city.name;
            hideSuggestions();
            searchWeatherByCoords(city.latitude, city.longitude, city.name);
        });
        suggestionsDiv.appendChild(item);
    });
    
    suggestionsDiv.style.display = 'block';
}

function hideSuggestions() {
    document.getElementById('suggestions').style.display = 'none';
}

async function searchWeather() {
    const cityName = document.getElementById('cityInput').value.trim();
    
    if (!cityName) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
        return;
    }
    
    setLoadingState(true);
    hideError();
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        const geoResponse = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(cityName)}&count=1&language=ru&format=json`);
        const geoData = await geoResponse.json();
        
        if (!geoData.results || geoData.results.length === 0) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const city = geoData.results[0];
        await searchWeatherByCoords(city.latitude, city.longitude, city.name);
        
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    } finally {
        setLoadingState(false);
    }
}

async function searchWeatherByCoords(lat, lon, cityName) {
    try {
        setLoadingState(true);
        hideError();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        const weatherResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,weather_code,cloud_cover,pressure_msl,wind_speed_10m,wind_direction_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum,wind_speed_10m_max&timezone=auto&forecast_days=7`);
        const weatherData = await weatherResponse.json();
        
        displayWeatherResult(weatherData, cityName);
        addToRecentCities(cityName);
        
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
    } finally {
        setLoadingState(false);
    }
}

function displayWeatherResult(data, cityName) {
    const current = data.current;
    const daily = data.daily;
    
    const weatherHTML = `
        <div class="weather-header">
            <h2 class="city-name">${cityName}</h2>
            <p class="weather-date">${formatDate(new Date())}</p>
        </div>
        
        <div class="current-weather">
            <div class="weather-icon">${getWeatherIcon(current.weather_code, current.is_day)}</div>
            <div class="weather-temp">
                <div class="temperature">${Math.round(current.temperature_2m)}¬∞C</div>
                <div class="weather-description">${getWeatherDescription(current.weather_code)}</div>
            </div>
        </div>
        
        <div class="weather-details">
            <div class="detail-item">
                <div class="detail-icon">üå°Ô∏è</div>
                <div class="detail-label">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</div>
                <div class="detail-value">${Math.round(current.apparent_temperature)}¬∞C</div>
            </div>
            <div class="detail-item">
                <div class="detail-icon">üíß</div>
                <div class="detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</div>
                <div class="detail-value">${current.relative_humidity_2m}%</div>
            </div>
            <div class="detail-item">
                <div class="detail-icon">üí®</div>
                <div class="detail-label">–í–µ—Ç–µ—Ä</div>
                <div class="detail-value">${Math.round(current.wind_speed_10m)} –∫–º/—á</div>
            </div>
            <div class="detail-item">
                <div class="detail-icon">üåä</div>
                <div class="detail-label">–î–∞–≤–ª–µ–Ω–∏–µ</div>
                <div class="detail-value">${Math.round(current.pressure_msl)} –≥–ü–∞</div>
            </div>
            <div class="detail-item">
                <div class="detail-icon">‚òÅÔ∏è</div>
                <div class="detail-label">–û–±–ª–∞—á–Ω–æ—Å—Ç—å</div>
                <div class="detail-value">${current.cloud_cover}%</div>
            </div>
            <div class="detail-item">
                <div class="detail-icon">üåßÔ∏è</div>
                <div class="detail-label">–û—Å–∞–¥–∫–∏</div>
                <div class="detail-value">${current.precipitation} –º–º</div>
            </div>
        </div>
        
        <div class="forecast">
            <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π</h3>
            <div class="forecast-container">
                ${generateForecast(daily)}
            </div>
        </div>
    `;
    
    document.getElementById('weatherResult').innerHTML = weatherHTML;
    document.getElementById('weatherResult').style.display = 'block';
}

function generateForecast(daily) {
    let forecastHTML = '';
    const today = new Date();
    
    for (let i = 0; i < daily.time.length; i++) {
        const date = new Date(daily.time[i]);
        const dayName = i === 0 ? '–°–µ–≥–æ–¥–Ω—è' : i === 1 ? '–ó–∞–≤—Ç—Ä–∞' : formatDayName(date);
        
        forecastHTML += `
            <div class="forecast-item">
                <div class="forecast-day">${dayName}</div>
                <div class="forecast-icon">${getWeatherIcon(daily.weather_code[i], 1)}</div>
                <div class="forecast-temps">
                    <span class="temp-high">${Math.round(daily.temperature_2m_max[i])}¬∞</span>
                    <span class="temp-low">${Math.round(daily.temperature_2m_min[i])}¬∞</span>
                </div>
            </div>
        `;
    }
    
    return forecastHTML;
}

function getWeatherIcon(code, isDay) {
    const icons = {
        0: isDay ? '‚òÄÔ∏è' : 'üåô', // –Ø—Å–Ω–æ
        1: isDay ? 'üå§Ô∏è' : 'üåô', // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ
        2: '‚õÖ', // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
        3: '‚òÅÔ∏è', // –ü–∞—Å–º—É—Ä–Ω–æ
        45: 'üå´Ô∏è', // –¢—É–º–∞–Ω
        48: 'üå´Ô∏è', // –ò–∑–º–æ—Ä–æ–∑—å
        51: 'üå¶Ô∏è', // –õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å
        53: 'üå¶Ô∏è', // –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å
        55: 'üåßÔ∏è', // –°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å
        56: 'üå®Ô∏è', // –õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
        57: 'üå®Ô∏è', // –°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
        61: 'üå¶Ô∏è', // –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å
        63: 'üåßÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
        65: '‚õàÔ∏è', // –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
        66: 'üå®Ô∏è', // –õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
        67: 'üå®Ô∏è', // –°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
        71: '‚ùÑÔ∏è', // –õ–µ–≥–∫–∏–π —Å–Ω–µ–≥
        73: 'üå®Ô∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥
        75: '‚òÉÔ∏è', // –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥
        77: 'üå®Ô∏è', // –°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞
        80: 'üå¶Ô∏è', // –õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏
        81: 'üåßÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏
        82: '‚õàÔ∏è', // –°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏
        85: 'üå®Ô∏è', // –õ–µ–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏
        86: '‚òÉÔ∏è', // –°–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏
        95: '‚õàÔ∏è', // –ì—Ä–æ–∑–∞
        96: '‚õàÔ∏è', // –ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º
        99: '‚õàÔ∏è'  // –°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º
    };
    
    return icons[code] || 'üå§Ô∏è';
}

function getWeatherDescription(code) {
    const descriptions = {
        0: '–Ø—Å–Ω–æ',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ',
        45: '–¢—É–º–∞–Ω',
        48: '–ò–∑–º–æ—Ä–æ–∑—å',
        51: '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
        53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
        56: '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        57: '–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        61: '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
        63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
        65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        66: '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        67: '–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        71: '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥',
        73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
        75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
        77: '–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞',
        80: '–õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏',
        81: '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏',
        82: '–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏',
        85: '–õ–µ–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
        86: '–°–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
        95: '–ì—Ä–æ–∑–∞',
        96: '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º',
        99: '–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
    };
    
    return descriptions[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function addToRecentCities(cityName) {
    // –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    recentCities = recentCities.filter(city => city !== cityName);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    recentCities.unshift(cityName);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 5 –≥–æ—Ä–æ–¥–∞–º–∏
    recentCities = recentCities.slice(0, 5);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('recentCities', JSON.stringify(recentCities));
    
    displayRecentCities();
}

function displayRecentCities() {
    const recentCitiesDiv = document.getElementById('recentCities');
    const recentCityTags = document.getElementById('recentCityTags');
    
    if (recentCities.length > 0) {
        recentCityTags.innerHTML = '';
        recentCities.forEach(city => {
            const tag = document.createElement('span');
            tag.className = 'recent-city-tag';
            tag.textContent = city;
            tag.addEventListener('click', () => {
                document.getElementById('cityInput').value = city;
                searchWeather();
            });
            recentCityTags.appendChild(tag);
        });
        recentCitiesDiv.style.display = 'block';
    } else {
        recentCitiesDiv.style.display = 'none';
    }
}

function displayPopularCities() {
    const historyDiv = document.getElementById('searchHistory');
    const historyList = document.getElementById('historyList');
    
    historyList.innerHTML = '';
    popularCities.forEach(city => {
        const item = document.createElement('div');
        item.className = 'history-item';
        item.textContent = city;
        item.addEventListener('click', () => {
            document.getElementById('cityInput').value = city;
            searchWeather();
        });
        historyList.appendChild(item);
    });
    
    historyDiv.style.display = 'block';
}

function setLoadingState(isLoading) {
    const searchButton = document.getElementById('searchButton');
    const searchButtonText = document.getElementById('searchButtonText');
    const spinner = document.getElementById('spinner');
    
    if (isLoading) {
        searchButton.disabled = true;
        searchButtonText.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º...';
        spinner.style.display = 'inline-block';
    } else {
        searchButton.disabled = false;
        searchButtonText.textContent = '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑';
        spinner.style.display = 'none';
    }
}

function showError(message) {
    const errorDiv = document.getElementById('error');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        hideError();
    }, 5000);
}

function hideError() {
    document.getElementById('error').style.display = 'none';
}

function formatDate(date) {
    const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    };
    return date.toLocaleDateString('ru-RU', options);
}

function formatDayName(date) {
    const options = { weekday: 'short' };
    return date.toLocaleDateString('ru-RU', options);
}